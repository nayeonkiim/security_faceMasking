from camAndEncrypt.encrypt import enc
from camAndEncrypt.img_change import get_img, image_to_byte_array, toImgFile
from camAndEncrypt.file import file_write
from camAndEncrypt.file import file_read
from camAndEncrypt.decrypt import dec
import cv2
import numpy as np
from PIL import Image


def encryptImg(filePath) :
    img, img_pil = get_img(filePath + ".bmp")
    # 각종 키 정보
    key = bytes([0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF])
    aad = bytes([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E])
    nonce = bytes([0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC])  # 기본 12(96bit)byte이며 길이 변경 가능.
    plain_data = img_pil.tobytes()  # 원본 데이터(바이너리 데이터 넣기)


    # 암호화 시작
    cipher_data, mac = enc(key, aad, nonce, plain_data)
    # 암호화 한 바이너리 데이터 텍스트 파일에 저장하는 경로
    bin_filePath = filePath + '.bin'
    # 텍스트 파일에 저장
    file_write(bin_filePath, cipher_data)

    return bin_filePath, mac


def decryptImg(bin_filePath, mac, path):
    print(mac)
    # 바이너리 데이터 텍스트 파일에서 읽어오기
    text = file_read(bin_filePath)

    key = bytes([0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF])
    aad = bytes([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E])
    nonce = bytes([0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC])  # 기본 12(96bit)byte이며 길이 변경 가능.

    # 복호화
    result = dec(key, aad, nonce, text, mac)
    toImgFile(result, path)


















